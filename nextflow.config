/*
 * -------------------------------------------------
 *  Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */


// Configurable variables
params {

  version = '1.0.0' // Pipeline version
  nf_required_version = '0.27.5' // Minimum version of nextflow required
  multiqc_config = "$baseDir/conf/multiqc_config.yaml"
}

profiles {
  singularity {
    includeConfig 'conf/snpcall.config'
    includeConfig 'conf/cbe.config'
    process.container = 'docker.artifactory.imp.ac.at/nordborglab/snpcall:master'
  }
  conda {
    includeConfig 'conf/snpcall.config'
    includeConfig 'conf/cbe.config'
    singularity.enabled = false // turn sinfularity off while using conda 
    // process.conda = "$projectDir/environment.yml"  //"$HOME/.conda/envs/snpcall"
    process.conda = "$HOME/.conda/envs/snpcall"
  }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER = "/.Rprofile"
  R_ENVIRON_USER = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.outdir}/pipeline_info/SNPcall_timeline.html"
}
report {
  enabled = true
  file = "${params.outdir}/pipeline_info/SNPcall_report.html"
}
trace {
  enabled = true
  file = "${params.outdir}/pipeline_info/SNPcall_trace.txt"
}
dag {
  enabled = true
  file = "${params.outdir}/pipeline_info/SNPcall_dag.svg"
}

manifest {
  homePage = 'https://github.com/rbpisupati/nf-haplocaller.git'
  description = 'Best practices nextflow pipeline for GATK HaplotypeCaller'
  mainScript = 'main.nf'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
